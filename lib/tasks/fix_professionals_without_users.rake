# frozen_string_literal: true

namespace :professionals do
  desc 'Criar usu√°rios para profissionais que n√£o possuem usu√°rio associado'
  task create_missing_users: :environment do
    puts '=== Criando Usu√°rios para Profissionais sem Usu√°rio ==='
    puts

    # Encontrar profissionais sem usu√°rio
    professionals_without_user = Professional.where(user: nil)

    puts "üìä Total de profissionais sem usu√°rio: #{professionals_without_user.count}"
    puts

    if professionals_without_user.none?
      puts '‚úÖ Todos os profissionais j√° possuem usu√°rio associado!'
      exit 0
    end

    # Separar por status ativo/inativo
    active_professionals = professionals_without_user.where(active: true)
    inactive_professionals = professionals_without_user.where(active: false)

    puts "üìã Profissionais ativos sem usu√°rio: #{active_professionals.count}"
    puts "üìã Profissionais inativos sem usu√°rio: #{inactive_professionals.count}"
    puts

    users_created = 0
    users_skipped = 0
    errors = []

    # Processar profissionais ativos primeiro
    puts 'üîÑ Processando profissionais ATIVOS...'
    active_professionals.find_each do |professional|
      # Criar usu√°rio diretamente
      temp_password = SecureRandom.hex(12)
      user = User.create!(
        name: professional.full_name,
        email: professional.email,
        password: temp_password,
        password_confirmation: temp_password
      )

      # Associar ao profissional
      professional.update_column(:user_id, user.id)

      # Associar grupos do profissional ao usu√°rio
      professional.groups.each do |group|
        user.memberships.create!(group: group)
      end

      puts "‚úÖ Usu√°rio criado para #{professional.full_name} (#{professional.email})"
      users_created += 1
    rescue StandardError => e
      error_msg = "Erro ao criar usu√°rio para profissional #{professional.id} (#{professional.full_name}): #{e.message}"
      puts "‚ùå #{error_msg}"
      errors << error_msg
    end

    # Perguntar sobre profissionais inativos
    if inactive_professionals.any?
      puts
      puts "‚ö†Ô∏è  Encontrados #{inactive_professionals.count} profissionais INATIVOS sem usu√°rio."
      puts '   Profissionais inativos normalmente n√£o precisam de usu√°rio.'
      puts '   Deseja criar usu√°rios para profissionais inativos? (s/N): '

      # Em ambiente de produ√ß√£o, n√£o perguntar - apenas logar
      if Rails.env.production?
        puts '   Ambiente de produ√ß√£o - pulando profissionais inativos'
        users_skipped = inactive_professionals.count
      else
        # Em desenvolvimento, perguntar
        response = $stdin.gets.chomp.downcase
        if %w[s sim].include?(response)
          puts
          puts 'üîÑ Processando profissionais INATIVOS...'
          inactive_professionals.find_each do |professional|
            # Criar usu√°rio diretamente
            temp_password = SecureRandom.hex(12)
            user = User.create!(
              name: professional.full_name,
              email: professional.email,
              password: temp_password,
              password_confirmation: temp_password
            )

            # Associar ao profissional
            professional.update_column(:user_id, user.id)

            # Associar grupos do profissional ao usu√°rio
            professional.groups.each do |group|
              user.memberships.create!(group: group)
            end

            puts "‚úÖ Usu√°rio criado para #{professional.full_name} (#{professional.email}) - INATIVO"
            users_created += 1
          rescue StandardError => e
            error_msg = "Erro ao criar usu√°rio para profissional inativo #{professional.id} (#{professional.full_name}): #{e.message}"
            puts "‚ùå #{error_msg}"
            errors << error_msg
          end
        else
          puts '   Pulando profissionais inativos'
          users_skipped = inactive_professionals.count
        end
      end
    end

    puts
    puts '=== Resumo ==='
    puts "‚úÖ Usu√°rios criados: #{users_created}"
    puts "‚è≠Ô∏è  Profissionais pulados: #{users_skipped}"
    puts "‚ùå Erros: #{errors.count}"

    if errors.any?
      puts
      puts '=== Erros Detalhados ==='
      errors.each { |error| puts "  ‚Ä¢ #{error}" }
    end

    puts
    puts '=== Verifica√ß√£o Final ==='
    remaining_without_user = Professional.where(user: nil).count
    puts "Profissionais sem usu√°rio restantes: #{remaining_without_user}"

    if remaining_without_user.zero?
      puts 'üéâ Todos os profissionais agora possuem usu√°rio!'
    else
      puts "‚ö†Ô∏è  Ainda existem #{remaining_without_user} profissionais sem usu√°rio"
    end
  end

  desc 'Listar profissionais sem usu√°rio'
  task list_without_users: :environment do
    puts '=== Profissionais sem Usu√°rio ==='
    puts

    professionals_without_user = Professional.where(user: nil)

    if professionals_without_user.none?
      puts '‚úÖ Todos os profissionais possuem usu√°rio!'
      exit 0
    end

    puts "Total: #{professionals_without_user.count} profissionais"
    puts

    professionals_without_user.order(:active, :full_name).each do |professional|
      status = professional.active? ? 'üü¢ ATIVO' : 'üî¥ INATIVO'
      puts "#{status} | #{professional.full_name} (#{professional.email}) | ID: #{professional.id}"
    end

    puts
    puts "Execute 'rake professionals:create_missing_users' para criar usu√°rios"
  end

  desc 'Verificar status dos usu√°rios dos profissionais'
  task check_user_status: :environment do
    puts '=== Status dos Usu√°rios dos Profissionais ==='
    puts

    total_professionals = Professional.count
    professionals_with_user = Professional.where.not(user: nil).count
    professionals_without_user = Professional.where(user: nil).count
    active_professionals_without_user = Professional.where(user: nil, active: true).count

    puts 'üìä Estat√≠sticas:'
    puts "   Total de profissionais: #{total_professionals}"
    puts "   Com usu√°rio: #{professionals_with_user}"
    puts "   Sem usu√°rio: #{professionals_without_user}"
    puts "   Ativos sem usu√°rio: #{active_professionals_without_user}"
    puts

    if active_professionals_without_user.positive?
      puts "‚ö†Ô∏è  ATEN√á√ÉO: #{active_professionals_without_user} profissionais ativos n√£o possuem usu√°rio!"
      puts "   Execute 'rake professionals:create_missing_users' para corrigir"
    else
      puts '‚úÖ Todos os profissionais ativos possuem usu√°rio!'
    end

    puts
    puts "Execute 'rake professionals:list_without_users' para ver detalhes"
  end
end
