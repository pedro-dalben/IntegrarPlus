<div class="basic-calendar-wrapper" id="<%= calendar_id %>">
  <!-- Cabeçalho da Agenda -->
  <div class="flex items-center justify-between mb-6">
    <div class="flex items-center gap-4">
      <!-- Seletor de Visualização -->
      <select id="calendar-view-selector"
          class="px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          onchange="changeCalendarView(this.value)">
        <option value="month">Mês</option>
        <option value="week">Semana</option>
        <option value="day">Dia</option>
      </select>

      <!-- Filtro por Tipo de Evento -->
      <select class="px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
        <option value="all">Todos os tipos</option>
        <% event_types.each do |type| %>
          <option value="<%= type[:value] %>"><%= type[:label] %></option>
        <% end %>
      </select>
    </div>

    <!-- Botões de Navegação -->
    <div class="flex items-center gap-2">
      <button type="button" id="prev-button" class="px-3 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
        </svg>
      </button>

      <button type="button" id="today-button" class="px-3 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500">
        Hoje
      </button>

      <button type="button" id="next-button" class="px-3 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
        </svg>
      </button>
    </div>
  </div>

  <!-- Calendário Principal -->
  <div class="bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 p-6 shadow-lg">
    <div id="calendar-container" style="min-height: 600px;">
      <!-- O calendário será renderizado pelo JavaScript -->
      <div class="flex items-center justify-center h-full">
        <div class="text-center">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p class="text-gray-500 dark:text-gray-400">Carregando calendário...</p>
        </div>
      </div>
    </div>
  </div>

  <!-- Legenda de Cores -->
  <div class="mt-6 bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 p-4">
    <h4 class="text-sm font-medium text-gray-900 dark:text-white mb-3">Legenda de Eventos</h4>
    <div class="flex flex-wrap gap-3">
      <% event_types.each do |type| %>
        <div class="flex items-center gap-2">
          <div class="w-3 h-3 rounded-full" style="background-color: <%= type[:color] %>"></div>
          <span class="text-sm text-gray-600 dark:text-gray-400"><%= type[:label] %></span>
        </div>
      <% end %>
    </div>
  </div>

  <!-- Lista de Eventos do Mês -->
  <% if current_month_events.any? %>
    <div class="mt-6 bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 p-4">
      <h4 class="text-sm font-medium text-gray-900 dark:text-white mb-3">Eventos de <%= Date.current.strftime("%B de %Y") %></h4>
      <div class="space-y-2">
        <% current_month_events.each do |event| %>
          <div class="flex items-center gap-3 p-3 rounded-lg border border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors">
            <div class="w-3 h-3 rounded-full" style="background-color: <%= event[:color] %>"></div>
            <div class="flex-1">
              <div class="font-medium text-gray-900 dark:text-white"><%= event[:title] %></div>
              <div class="text-sm text-gray-500 dark:text-gray-400">
                <%= event[:start].strftime("%d/%m às %H:%M") %> - <%= event[:professional_name] %>
              </div>
              <% if event[:description].present? %>
                <div class="text-xs text-gray-400 dark:text-gray-500 mt-1">
                  <%= event[:description] %>
                </div>
              <% end %>
            </div>
            <div class="text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400">
              <%= event[:event_type].humanize %>
            </div>
          </div>
        <% end %>
      </div>
    </div>
  <% else %>
    <div class="mt-6 bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 p-8 text-center">
      <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
      </svg>
      <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">
        Nenhum evento agendado para este mês
      </h3>
      <p class="text-gray-500 dark:text-gray-400">
        Que tal criar um novo evento?
      </p>
    </div>
  <% end %>
</div>

<script>
// Evitar redeclaração de variáveis com Turbo
if (typeof window.basicCalendarData === 'undefined') {
  window.basicCalendarData = {};
}

// Dados dos eventos para JavaScript (namespace único)
window.basicCalendarData['<%= calendar_id %>'] = {
  events: <%= raw events_data.to_json %>,
  currentView: 'month',
  currentDate: new Date()
};

// Função global para trocar visualização (namespace único)
window.changeCalendarView = function(view) {
  const calendarId = '<%= calendar_id %>';
  if (window.basicCalendarData[calendarId]) {
    window.basicCalendarData[calendarId].currentView = view;
    renderCalendar();
  }
}

function renderCalendar() {
  const container = document.getElementById('calendar-container');
  const calendarId = '<%= calendar_id %>';
  const calendarData = window.basicCalendarData[calendarId];

  if (!container || !calendarData) return;

  if (calendarData.currentView === 'month') {
    renderMonthView(container, calendarData);
  } else if (calendarData.currentView === 'week') {
    renderWeekView(container, calendarData);
  } else if (calendarData.currentView === 'day') {
    renderDayView(container, calendarData);
  }
}

function renderMonthView(container, calendarData) {
  const year = calendarData.currentDate.getFullYear();
  const month = calendarData.currentDate.getMonth();
  const firstDay = new Date(year, month, 1);
  const lastDay = new Date(year, month + 1, 0);
  const startDate = new Date(firstDay);
  startDate.setDate(startDate.getDate() - firstDay.getDay());

  let html = `
    <div class="calendar-container">
      <div class="calendar-header mb-6">
        <h3 class="text-2xl font-bold text-gray-900 dark:text-white text-center">
          ${calendarData.currentDate.toLocaleDateString('pt-BR', { month: 'long', year: 'numeric' })}
        </h3>
      </div>

      <div class="grid grid-cols-7 gap-1 mb-2">
        ${['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb'].map(day =>
          `<div class="text-center text-sm font-semibold text-gray-600 dark:text-gray-400 py-3 bg-gray-50 dark:bg-gray-700 rounded-lg">${day}</div>`
        ).join('')}
      </div>

      <div class="grid grid-cols-7 gap-1">
  `;

  for (let i = 0; i < 42; i++) {
    const date = new Date(startDate);
    date.setDate(startDate.getDate() + i);

    const isCurrentMonth = date.getMonth() === month;
    const isToday = isSameDay(date, new Date());
    const dayEvents = getEventsForDay(date, calendarData);

    html += `
      <div class="h-24 border border-gray-200 dark:border-gray-700 p-2 text-sm rounded-lg transition-colors cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700
          ${!isCurrentMonth ? 'text-gray-400 dark:text-gray-600' : 'text-gray-900 dark:text-white'}
          ${isToday ? 'bg-blue-50 dark:bg-blue-900/20' : ''}">
        <div class="font-medium mb-1 ${isToday ? 'text-blue-600 dark:text-blue-400' : ''}">
          ${date.getDate()}
        </div>
        <div class="space-y-1">
          ${dayEvents.slice(0, 2).map(event => `
            <div class="text-xs p-1 rounded truncate text-white font-medium"
                 style="background-color: ${event.color}"
                 title="${event.title} - ${event.professional_name}">
              ${event.title}
            </div>
          `).join('')}
          ${dayEvents.length > 2 ? `<div class="text-xs text-gray-500 dark:text-gray-400 font-medium">+${dayEvents.length - 2} mais</div>` : ''}
        </div>
      </div>
    `;
  }

  html += '</div></div>';
  container.innerHTML = html;
}

function renderWeekView(container, calendarData) {
  const weekStart = getWeekStart(calendarData.currentDate);
  const weekDays = [];

  for (let i = 0; i < 7; i++) {
    const day = new Date(weekStart);
    day.setDate(weekStart.getDate() + i);
    weekDays.push(day);
  }

  let html = `
    <div class="calendar-container">
      <div class="calendar-header mb-6">
        <h3 class="text-2xl font-bold text-gray-900 dark:text-white text-center">
          Semana de ${weekDays[0].toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit' })} a ${weekDays[6].toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit', year: 'numeric' })}
        </h3>
      </div>

      <div class="grid grid-cols-7 gap-4">
  `;

  weekDays.forEach(day => {
    const isToday = isSameDay(day, new Date());
    const dayEvents = getEventsForDay(day, calendarData);

    html += `
      <div class="border border-gray-200 dark:border-gray-700 rounded-lg p-4
          ${isToday ? 'bg-blue-50 dark:bg-blue-900/20' : 'bg-white dark:bg-gray-800'}">
        <div class="text-center mb-4">
          <div class="text-sm font-medium text-gray-600 dark:text-gray-400">
            ${day.toLocaleDateString('pt-BR', { weekday: 'short' })}
          </div>
          <div class="text-lg font-bold ${isToday ? 'text-blue-600 dark:text-blue-400' : 'text-gray-900 dark:text-white'}">
            ${day.getDate()}
          </div>
        </div>
        <div class="space-y-2">
          ${dayEvents.map(event => `
            <div class="p-2 rounded text-xs text-white font-medium"
                 style="background-color: ${event.color}"
                 title="${event.title} - ${event.professional_name}">
              <div class="font-semibold">${event.title}</div>
              <div class="opacity-90">${event.start_time}</div>
            </div>
          `).join('')}
          ${dayEvents.length === 0 ? '<div class="text-xs text-gray-400 text-center py-4">Nenhum evento</div>' : ''}
        </div>
      </div>
    `;
  });

  html += '</div></div>';
  container.innerHTML = html;
}

function renderDayView(container, calendarData) {
  const isToday = isSameDay(calendarData.currentDate, new Date());
  const dayEvents = getEventsForDay(calendarData.currentDate, calendarData);

  let html = `
    <div class="calendar-container">
      <div class="calendar-header mb-6">
        <h3 class="text-2xl font-bold text-gray-900 dark:text-white text-center">
          ${currentDate.toLocaleDateString('pt-BR', {
            weekday: 'long',
            day: '2-digit',
            month: 'long',
            year: 'numeric'
          })}
        </h3>
      </div>

      <div class="grid grid-cols-1 gap-4">
  `;

  // Horários do dia (8h às 18h)
  for (let hour = 8; hour <= 18; hour++) {
    const timeSlot = `${hour.toString().padStart(2, '0')}:00`;
    const hourEvents = dayEvents.filter(event =>
      event.start_time && event.start_time.startsWith(timeSlot)
    );

    html += `
      <div class="border border-gray-200 dark:border-gray-700 rounded-lg p-4 bg-white dark:bg-gray-800">
        <div class="flex items-center gap-4">
          <div class="w-16 text-sm font-medium text-gray-600 dark:text-gray-400">
            ${timeSlot}
          </div>
          <div class="flex-1">
            ${hourEvents.length > 0 ? hourEvents.map(event => `
              <div class="p-3 rounded-lg text-white font-medium mb-2"
                   style="background-color: ${event.color}">
                <div class="font-semibold">${event.title}</div>
                <div class="text-sm opacity-90">${event.professional_name}</div>
                <div class="text-xs opacity-75">${event.start_time} - ${event.end_time || 'N/A'}</div>
              </div>
            `).join('') : '<div class="text-sm text-gray-400">Horário livre</div>'}
          </div>
        </div>
      </div>
    `;
  }

  html += '</div></div>';
  container.innerHTML = html;
}

function getEventsForDay(date, calendarData) {
  return calendarData.events.filter(event => {
    const eventDate = new Date(event.start);
    return isSameDay(eventDate, date);
  });
}

function getWeekStart(date) {
  const start = new Date(date);
  const day = start.getDay();
  const diff = start.getDate() - day;
  start.setDate(diff);
  return start;
}

function isSameDay(date1, date2) {
  return date1.getDate() === date2.getDate() &&
         date1.getMonth() === date2.getMonth() &&
         date1.getFullYear() === date2.getFullYear();
}

// Funções de navegação
function navigatePrevious() {
  const calendarId = '<%= calendar_id %>';
  const calendarData = window.basicCalendarData[calendarId];
  if (!calendarData) return;

  if (calendarData.currentView === 'month') {
    calendarData.currentDate.setMonth(calendarData.currentDate.getMonth() - 1);
  } else if (calendarData.currentView === 'week') {
    calendarData.currentDate.setDate(calendarData.currentDate.getDate() - 7);
  } else if (calendarData.currentView === 'day') {
    calendarData.currentDate.setDate(calendarData.currentDate.getDate() - 1);
  }
  renderCalendar();
}

function navigateNext() {
  const calendarId = '<%= calendar_id %>';
  const calendarData = window.basicCalendarData[calendarId];
  if (!calendarData) return;

  if (calendarData.currentView === 'month') {
    calendarData.currentDate.setMonth(calendarData.currentDate.getMonth() + 1);
  } else if (calendarData.currentView === 'week') {
    calendarData.currentDate.setDate(calendarData.currentDate.getDate() + 7);
  } else if (calendarData.currentView === 'day') {
    calendarData.currentDate.setDate(calendarData.currentDate.getDate() + 1);
  }
  renderCalendar();
}

function goToToday() {
  const calendarId = '<%= calendar_id %>';
  const calendarData = window.basicCalendarData[calendarId];
  if (calendarData) {
    calendarData.currentDate = new Date();
    renderCalendar();
  }
}

// Função de inicialização única
function initializeBasicCalendar() {
  const calendarId = '<%= calendar_id %>';
  const calendarData = window.basicCalendarData[calendarId];

  if (!calendarData) return;

  renderCalendar();

  // Adicionar event listeners para navegação (evitar duplicação)
  const prevButton = document.getElementById('prev-button');
  const nextButton = document.getElementById('next-button');
  const todayButton = document.getElementById('today-button');

  if (prevButton && !prevButton.hasAttribute('data-listener-added')) {
    prevButton.addEventListener('click', navigatePrevious);
    prevButton.setAttribute('data-listener-added', 'true');
  }

  if (nextButton && !nextButton.hasAttribute('data-listener-added')) {
    nextButton.addEventListener('click', navigateNext);
    nextButton.setAttribute('data-listener-added', 'true');
  }

  if (todayButton && !todayButton.hasAttribute('data-listener-added')) {
    todayButton.addEventListener('click', goToToday);
    todayButton.setAttribute('data-listener-added', 'true');
  }
}

if (!window.basicCalendarListenersAttached) {
  document.addEventListener('DOMContentLoaded', initializeBasicCalendar);
  document.addEventListener('turbo:load', initializeBasicCalendar);
  document.addEventListener('turbo:render', initializeBasicCalendar);
  window.basicCalendarListenersAttached = true;
} else {
  initializeBasicCalendar();
}
</script>
